/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Wizard.java
 *
 * Created on 28-Jun-2010, 10:13:29
 */

package phoniex.GUI;

import phoniex.Processer;
import phoniex.IO.Output;
import phoniex.IO.Input;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import phoniex.Core;
import phoniex.Filter;

/**
 *
 * @author Admin
 */
public class Wizard extends javax.swing.JFrame {

    /** Creates new form Wizard */
    public Wizard(Core core) {
        initComponents();
        this.core=core;
        setIconImage(Core.getLogo());
        setTitle("Wizard");
    }
    Core core;
    int progress=20;
    int step=0;
    JFileChooser fc = new JFileChooser();
    boolean fuzzy = false;
    boolean finished=false;
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        Message = new javax.swing.JLabel();
        input = new javax.swing.JTextField();
        fileChoser = new javax.swing.JButton();
        next = new javax.swing.JButton();
        back = new javax.swing.JButton();
        fullLmr = new javax.swing.JRadioButton();
        FilteredLmr = new javax.swing.JRadioButton();
        Matching = new javax.swing.JProgressBar();
        jToolBar1 = new javax.swing.JToolBar();
        fuzzyCheck = new javax.swing.JCheckBox();
        fuzzPercent = new javax.swing.JComboBox();
        progressBar = new javax.swing.JProgressBar();
        export = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        finish = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(Wizard.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setName("Form"); // NOI18N

        Message.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Message.setText(resourceMap.getString("Message.text")); // NOI18N
        Message.setName("Message"); // NOI18N

        input.setText(resourceMap.getString("input.text")); // NOI18N
        input.setName("input"); // NOI18N

        fileChoser.setText(resourceMap.getString("fileChoser.text")); // NOI18N
        fileChoser.setName("fileChoser"); // NOI18N
        fileChoser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChoserActionPerformed(evt);
            }
        });

        next.setText(resourceMap.getString("next.text")); // NOI18N
        next.setName("next"); // NOI18N
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        back.setText(resourceMap.getString("back.text")); // NOI18N
        back.setName("back"); // NOI18N
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        buttonGroup1.add(fullLmr);
        fullLmr.setText(resourceMap.getString("fullLmr.text")); // NOI18N
        fullLmr.setName("fullLmr"); // NOI18N

        buttonGroup1.add(FilteredLmr);
        FilteredLmr.setText(resourceMap.getString("FilteredLmr.text")); // NOI18N
        FilteredLmr.setName("FilteredLmr"); // NOI18N

        Matching.setName("Matching"); // NOI18N

        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        fuzzyCheck.setText(resourceMap.getString("fuzzyCheck.text")); // NOI18N
        fuzzyCheck.setToolTipText(resourceMap.getString("fuzzyCheck.toolTipText")); // NOI18N
        fuzzyCheck.setName("fuzzyCheck"); // NOI18N
        fuzzyCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fuzzyCheckActionPerformed(evt);
            }
        });

        fuzzPercent.setEditable(true);
        fuzzPercent.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "95", "90", "85", "80", "75", "70", "65", "60", " ", " " }));
        fuzzPercent.setSelectedIndex(5);
        fuzzPercent.setToolTipText(resourceMap.getString("fuzzPercent.toolTipText")); // NOI18N
        fuzzPercent.setName("fuzzPercent"); // NOI18N

        progressBar.setValue(20);
        progressBar.setName("progressBar"); // NOI18N

        export.setText(resourceMap.getString("export.text")); // NOI18N
        export.setName("export"); // NOI18N
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        Save.setText(resourceMap.getString("Save.text")); // NOI18N
        Save.setName("Save"); // NOI18N
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        finish.setText(resourceMap.getString("finish.text")); // NOI18N
        finish.setName("finish"); // NOI18N
        finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Message, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(input, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(fuzzyCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                                        .addComponent(fuzzPercent, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40))
                                    .addComponent(Matching, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(back)
                                        .addGap(44, 44, 44)
                                        .addComponent(export, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                                        .addComponent(next))
                                    .addComponent(fullLmr, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                    .addComponent(FilteredLmr, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addComponent(fileChoser, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Save, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                        .addGap(157, 157, 157)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(finish, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)))
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {back, next});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Message, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileChoser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fullLmr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FilteredLmr)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fuzzyCheck)
                    .addComponent(fuzzPercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Matching, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(next)
                        .addComponent(back))
                    .addComponent(export, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(finish, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Save, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Save, back, export, finish, next});

        fullLmr.setVisible(false);
        FilteredLmr.setVisible(false);
        Matching.setVisible(false);
        fuzzyCheck.setVisible(false);
        fuzzPercent.setVisible(false);
        export.setVisible(false);
        Save.setVisible(false);
        finish.setVisible(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public boolean run(){
        setVisible(true);
        
        return finished;
    }

    private void fileChoserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChoserActionPerformed
       if(step==0){
        FileFilter filter = new FileNameExtensionFilter("XLIFF files", "xlf");
        fc.addChoosableFileFilter(filter);
       }
       if(step==1){
        FileFilter filter = new FileNameExtensionFilter("LMC files", "lmc");
        fc.addChoosableFileFilter(filter);
       }
       fc.showOpenDialog(null);
       input.setText(fc.getSelectedFile().getPath());
    }//GEN-LAST:event_fileChoserActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        switch(step){
            case 0: {

                core.setInput(Input.docLoad(input.getText()));
                if(core.getInput()!=null){
                Message.setText("Please select an LMC file");
                step++;
                progressBar.setValue((progress=20*step));
                }
                input.setText("");
                break;
            }
            case 1: { 
                core.setRepos(Input.docLoad(input.getText()));
                if(core.getRepos()!=null){
                Message.setVisible(false);
                input.setVisible(false);
                fullLmr.setVisible(true);
                FilteredLmr.setVisible(true);
                fileChoser.setVisible(false);
                step++;
                progressBar.setValue((progress=20*step));
                }
                break;
            }
            case 2: {
                fullLmr.setVisible(false);
                FilteredLmr.setVisible(false);
                Message.setVisible(true);
                Filter filter = Filter.newFilter(core.getRepos());
                core.setFilteredRepos(filter.refine());
                if(FilteredLmr.isSelected()){
                    step++;
                    progressBar.setValue((progress=20*step));
                    Message.setText("Filtering in progress");
                    new FilterView(core);
                }
                else{
                    step++;
                    progressBar.setValue((progress=20*step));
                    Message.setText("Filtering skiped");
                }
                fuzzyCheck.setVisible(true);
                fuzzPercent.setVisible(fuzzy);
                break;
            }
            case 3: {
                fuzzyCheck.setVisible(false);
                fuzzPercent.setVisible(false);
                Processer processer = new Processer(core.getFilteredRepos(), core.getInput());
                processer.setProgress(Matching);
                step++;
                progressBar.setValue((progress=20*step));
                Message.setText("Leveraging in progress");
                Matching.setVisible(true);
                double percent=(Double.parseDouble((String)fuzzPercent.getSelectedItem())/100);
                if(fuzzy)  core.setOutput(processer.process(percent));
                else core.setOutput(processer.process(1));
                break;
            }
            case 4: {
                core.generatStats();
                Matching.setVisible(false);
                step++;
            }
            case 5:{
                Message.setText("Successful leverage");
                next.setVisible(false);
                back.setVisible(false);
                Save.setVisible(true);
                export.setVisible(false);
                finish.setVisible(true);
                progressBar.setValue((progress=20*step));
                break;
            }
        }
    }//GEN-LAST:event_nextActionPerformed

    private void fuzzyCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fuzzyCheckActionPerformed
        fuzzy=!fuzzy;
        fuzzPercent.setVisible(fuzzy);
}//GEN-LAST:event_fuzzyCheckActionPerformed

    @Override
    public void dispose(){
        PhoenixView.getReusageView().update("wizard");
        super.dispose();
    }


    private void finishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishActionPerformed
        finished=true;
        
        dispose();
    }//GEN-LAST:event_finishActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        core.getChoser().showSaveDialog(null);
        Output.save( core.getOutput(),core.getChoser().getSelectedFile().getPath());
    }//GEN-LAST:event_SaveActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        switch(step){
            
            case 1: {
                core.setRepos(Input.docLoad(input.getText()));
                if(core.getRepos()!=null){
                Message.setVisible(true);
                input.setVisible(true);
                input.setText("");
                
                step--;
                progressBar.setValue((progress=20*step));
                Message.setText("Please select an XLIFF file");
                }
                break;
            }
            case 2: {
                Message.setVisible(true);
                input.setVisible(true);
                fileChoser.setVisible(true);
                step--;
                Message.setText("Please select an LMC location");
                progressBar.setValue((progress=20*step));
                fullLmr.setVisible(false);
                FilteredLmr.setVisible(false);
                fuzzyCheck.setVisible(false);
                fuzzPercent.setVisible(false);
                break;
            }
            case 3: {
                fullLmr.setVisible(true);
                FilteredLmr.setVisible(true);
                fuzzyCheck.setVisible(false);
                fuzzPercent.setVisible(false);
                step--;
                Message.setVisible(false);
                progressBar.setValue((progress=20*step));
                break;
            }
            case 4: {
                step--;
                fuzzyCheck.setVisible(true);
                fuzzPercent.setVisible(true);
                Matching.setVisible(false);
                if(FilteredLmr.isSelected()){
                    step--;
                    Message.setText("Filtering in progress");
                    new FilterView(core);
                }
                else{
                    step--;
                    Message.setText("Filtering skiped");
                }
                progressBar.setValue((progress=20*step));
                break;
            }
        }
    }//GEN-LAST:event_backActionPerformed

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exportActionPerformed

    /**
    * @param args the command line arguments
    */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton FilteredLmr;
    private javax.swing.JProgressBar Matching;
    private javax.swing.JLabel Message;
    private javax.swing.JButton Save;
    private javax.swing.JButton back;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JButton export;
    private javax.swing.JButton fileChoser;
    private javax.swing.JButton finish;
    private javax.swing.JRadioButton fullLmr;
    private javax.swing.JComboBox fuzzPercent;
    private javax.swing.JCheckBox fuzzyCheck;
    private javax.swing.JTextField input;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton next;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

}
