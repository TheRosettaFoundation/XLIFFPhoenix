/*
 * PhoenixView.java
 */

package phoniex.GUI;

import com.centerkey.utils.BareBonesBrowserLaunch;
import phoniex.Processer;
import phoniex.PhoenixApp;
import lmc_builder.phoniex.Lmc.LmcBuilder;
import phoniex.IO.TmxDocExporter;
import phoniex.IO.Output;
import phoniex.IO.HtmlTransfromer;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.FrameView;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.io.IOException;
import java.util.Properties;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.jdom.Document;
import phoniex.Core;
import phoniex.IO.StatTransfromer;
import phoniex.IProcesser;


/**
 * The application's main frame.
 */
public class PhoenixView extends FrameView {
    private Core core;
    boolean fuzzy = false;
    boolean search = false;
    boolean source =false;
    Properties props   = new Properties();
    static PhoenixView rv = null;
    boolean offline = false;
    

    public static PhoenixView newReusageView(PhoenixApp app){
            if(rv==null)return new PhoenixView(app);
            else{
                return rv;
            }
        }

    public static PhoenixView getReusageView() {
        return rv;
    }

    public boolean isOffline() {
        return offline;
    }

    public void setOffline(boolean offline) {
        this.offline = offline;
    }


    public PhoenixView(PhoenixApp app) {
        super(app);
        rv=this;
        core=app.getCore();
        try{
        props.load(PhoenixView.class.getResourceAsStream("resources/mainView_en.properties"));
        }
        catch (IOException e){JOptionPane.showMessageDialog(null, e);}
        initComponents();
        getFrame().setTitle("XLIFF PHOENIX");
        getFrame().setIconImage(Core.getLogo());

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });

        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
       
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = PhoenixApp.getApplication().getMainFrame();
            aboutBox = new PhoenixAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);

        }
        PhoenixApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        fileview = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        repositoryTab = new WTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        FilteredTab =  new WTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        sourceTab = new WTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        targetTab = new WTextPane();
        filterButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        processButton = new javax.swing.JButton();
        fuzzyCheck = new javax.swing.JCheckBox();
        fuzzPercent = new javax.swing.JComboBox();
        wizardButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        menuLoad = new javax.swing.JMenuItem();
        menuSave = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        getJobs = new javax.swing.JMenuItem();
        loadFromServer = new javax.swing.JMenuItem();
        saveToServer = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        menuPrint = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        selectAll = new javax.swing.JMenuItem();
        menuCopy = new javax.swing.JMenuItem();
        tastMenu = new javax.swing.JMenu();
        targetFilter = new javax.swing.JMenuItem();
        altTransFilter = new javax.swing.JMenuItem();
        autoTranslate = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        statsToHtml = new javax.swing.JMenuItem();
        statsAsXml = new javax.swing.JMenuItem();
        toolMenu = new javax.swing.JMenu();
        tmxExporter = new javax.swing.JMenuItem();
        HtmlExport = new javax.swing.JMenuItem();
        LMCBuilder = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuWizard = new javax.swing.JMenuItem();
        menueFilter = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        languageMenu = new javax.swing.JMenu();
        englishLanguage = new javax.swing.JMenuItem();
        irishLanguage = new javax.swing.JMenuItem();
        spanishLanguage = new javax.swing.JMenuItem();
        germanLanguage = new javax.swing.JMenuItem();
        frenchLanguage = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        helpMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPopupMenu1 = new javax.swing.JPopupMenu();

        mainPanel.setMinimumSize(new java.awt.Dimension(400, 300));
        mainPanel.setName("mainPanel"); // NOI18N

        fileview.setDoubleBuffered(true);
        fileview.setName("fileview"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        repositoryTab.setEditable(false);
        repositoryTab.setDoubleBuffered(true);
        repositoryTab.setName("repositoryTab"); // NOI18N
        jScrollPane1.setViewportView(repositoryTab);

        fileview.addTab("Container", jScrollPane1);

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        FilteredTab.setEditable(false);
        FilteredTab.setDoubleBuffered(true);
        FilteredTab.setName("FilteredTab"); // NOI18N
        jScrollPane4.setViewportView(FilteredTab);

        fileview.addTab("Filtered Container", jScrollPane4);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        sourceTab.setEditable(false);
        sourceTab.setDoubleBuffered(true);
        sourceTab.setName("sourceTab"); // NOI18N
        jScrollPane2.setViewportView(sourceTab);

        fileview.addTab("Original", jScrollPane2);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        targetTab.setEditable(false);
        targetTab.setDoubleBuffered(true);
        targetTab.setName("targetTab"); // NOI18N
        jScrollPane3.setViewportView(targetTab);

        fileview.addTab("Enriched", jScrollPane3);

        filterButton.setText(core.propcheck("Filter",props.getProperty("filterButton.text")));
        filterButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        filterButton.setName("filterButton"); // NOI18N
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        saveButton.setText(core.propcheck("Save",props.getProperty("saveButton.text")));
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setText(core.propcheck("Load",props.getProperty("loadButton.text")));
        loadButton.setName("loadButton"); // NOI18N
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(PhoenixView.class, this);
        exitButton.setAction(actionMap.get("quit")); // NOI18N
        exitButton.setText(core.propcheck("Exit",props.getProperty("exitButton.text")));
        exitButton.setName("exitButton"); // NOI18N

        processButton.setText(core.propcheck("Process",props.getProperty("processButton.text"))
        );
        processButton.setName("processButton"); // NOI18N
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        fuzzyCheck.setText(core.propcheck("Fuzzy Matching",props.getProperty("fuzzyCheck.text")));
        fuzzyCheck.setName("fuzzyCheck"); // NOI18N
        fuzzyCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fuzzyCheckActionPerformed(evt);
            }
        });

        fuzzPercent.setEditable(true);
        fuzzPercent.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "95", "90", "85", "80", "75", "70", "65", "60", " ", " " }));
        fuzzPercent.setName("fuzzPercent"); // NOI18N

        wizardButton.setText(core.propcheck("Wizard",props.getProperty("wizardButton")));
        wizardButton.setName("wizardButton"); // NOI18N
        wizardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wizardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(processButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(loadButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
                        .addGap(38, 38, 38)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(filterButton, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(fuzzyCheck, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(fuzzPercent, 0, 106, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wizardButton, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
                        .addGap(25, 25, 25))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(fileview, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileview, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processButton)
                    .addComponent(fuzzyCheck)
                    .addComponent(fuzzPercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wizardButton))
                .addGap(16, 16, 16)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadButton)
                    .addComponent(saveButton)
                    .addComponent(exitButton)
                    .addComponent(filterButton))
                .addContainerGap())
        );

        mainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {exitButton, filterButton, fuzzPercent, fuzzyCheck, loadButton, processButton, saveButton, wizardButton});

        filterButton.setEnabled(false);
        saveButton.setEnabled(false);
        processButton.setEnabled(false);
        fuzzyCheck.setEnabled(false);
        fuzzPercent.setEnabled(false);

        menuBar.setMinimumSize(new java.awt.Dimension(50, 15));
        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(core.propcheck("File",props.getProperty("fileMenu.text")));
        fileMenu.setName("fileMenu"); // NOI18N
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        menuLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(PhoenixView.class);
        menuLoad.setText(resourceMap.getString("menuLoad.text")); // NOI18N
        menuLoad.setName("menuLoad"); // NOI18N
        menuLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLoadActionPerformed(evt);
            }
        });
        fileMenu.add(menuLoad);

        menuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSave.setText(resourceMap.getString("menuSave.text")); // NOI18N
        fileMenu.add(menuSave);

        jSeparator3.setName("jSeparator3"); // NOI18N
        fileMenu.add(jSeparator3);

        getJobs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_MASK));
        getJobs.setText(resourceMap.getString("getJobs.text")); // NOI18N
        getJobs.setName("getJobs"); // NOI18N
        getJobs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getJobsActionPerformed(evt);
            }
        });
        fileMenu.add(getJobs);

        loadFromServer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loadFromServer.setText(resourceMap.getString("loadFromServer.text")); // NOI18N
        loadFromServer.setName("loadFromServer"); // NOI18N
        loadFromServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFromServerActionPerformed(evt);
            }
        });
        fileMenu.add(loadFromServer);
        loadFromServer.setEnabled(false);

        saveToServer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveToServer.setText(resourceMap.getString("saveToServer.text")); // NOI18N
        saveToServer.setName("saveToServer"); // NOI18N
        saveToServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToServerActionPerformed(evt);
            }
        });
        fileMenu.add(saveToServer);

        jSeparator4.setName("jSeparator4"); // NOI18N
        fileMenu.add(jSeparator4);

        menuPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        menuPrint.setText(resourceMap.getString("menuPrint.text")); // NOI18N
        menuPrint.setName("menuPrint"); // NOI18N
        menuPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPrintActionPerformed(evt);
            }
        });
        fileMenu.add(menuPrint);

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        selectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        selectAll.setText(resourceMap.getString("selectAll.text")); // NOI18N
        selectAll.setName("selectAll"); // NOI18N
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });
        jMenu1.add(selectAll);

        menuCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        menuCopy.setText(resourceMap.getString("menuCopy.text")); // NOI18N
        menuCopy.setName("menuCopy"); // NOI18N
        menuCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCopyActionPerformed(evt);
            }
        });
        jMenu1.add(menuCopy);

        menuBar.add(jMenu1);

        tastMenu.setText(resourceMap.getString("tastMenu.text")); // NOI18N
        tastMenu.setName("tastMenu"); // NOI18N
        tastMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tastMenuActionPerformed(evt);
            }
        });

        targetFilter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        targetFilter.setText(resourceMap.getString("targetFilter.text")); // NOI18N
        targetFilter.setName("targetFilter"); // NOI18N
        targetFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetFilterActionPerformed(evt);
            }
        });
        tastMenu.add(targetFilter);

        altTransFilter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        altTransFilter.setText(resourceMap.getString("altTransFilter.text")); // NOI18N
        altTransFilter.setName("altTransFilter"); // NOI18N
        altTransFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altTransFilterActionPerformed(evt);
            }
        });
        tastMenu.add(altTransFilter);

        autoTranslate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        autoTranslate.setText(resourceMap.getString("autoTranslate.text")); // NOI18N
        autoTranslate.setName("autoTranslate"); // NOI18N
        autoTranslate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoTranslateActionPerformed(evt);
            }
        });
        tastMenu.add(autoTranslate);

        jSeparator5.setName("jSeparator5"); // NOI18N
        tastMenu.add(jSeparator5);

        statsToHtml.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        statsToHtml.setText(resourceMap.getString("statsToHtml.text")); // NOI18N
        statsToHtml.setName("statsToHtml"); // NOI18N
        statsToHtml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statsToHtmlActionPerformed(evt);
            }
        });
        tastMenu.add(statsToHtml);

        statsAsXml.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        statsAsXml.setText(resourceMap.getString("statsAsXml.text")); // NOI18N
        statsAsXml.setName("statsAsXml"); // NOI18N
        statsAsXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statsAsXmlActionPerformed(evt);
            }
        });
        tastMenu.add(statsAsXml);

        menuBar.add(tastMenu);

        toolMenu.setText(resourceMap.getString("toolMenu.text")); // NOI18N
        toolMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolMenuActionPerformed(evt);
            }
        });

        tmxExporter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        tmxExporter.setText(resourceMap.getString("tmxExporter.text")); // NOI18N
        tmxExporter.setName("tmxExporter"); // NOI18N
        tmxExporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tmxExporterActionPerformed(evt);
            }
        });
        tmxExporter.setEnabled(false);
        toolMenu.add(tmxExporter);

        HtmlExport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        HtmlExport.setText(resourceMap.getString("HtmlExport.text")); // NOI18N
        HtmlExport.setName("HtmlExport"); // NOI18N
        HtmlExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HtmlExportActionPerformed(evt);
            }
        });
        HtmlExport.setEnabled(false);
        toolMenu.add(HtmlExport);

        LMCBuilder.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        LMCBuilder.setText(resourceMap.getString("LMCBuilder.text")); // NOI18N
        LMCBuilder.setName("LMCBuilder"); // NOI18N
        LMCBuilder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LMCBuilderActionPerformed(evt);
            }
        });
        toolMenu.add(LMCBuilder);

        jSeparator1.setName("jSeparator1"); // NOI18N
        toolMenu.add(jSeparator1);

        menuWizard.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        menuWizard.setText(resourceMap.getString("menuWizard.text")); // NOI18N
        menuWizard.setName("menuWizard"); // NOI18N
        menuWizard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuWizardActionPerformed(evt);
            }
        });
        toolMenu.add(menuWizard);

        menueFilter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        menueFilter.setText(resourceMap.getString("menueFilter.text")); // NOI18N
        menueFilter.setName("menueFilter"); // NOI18N
        menueFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menueFilterActionPerformed(evt);
            }
        });
        toolMenu.add(menueFilter);

        jSeparator2.setName("jSeparator2"); // NOI18N
        toolMenu.add(jSeparator2);

        languageMenu.setText(resourceMap.getString("languageMenu.text")); // NOI18N
        languageMenu.setName("languageMenu"); // NOI18N

        englishLanguage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        englishLanguage.setText(resourceMap.getString("englishLanguage.text")); // NOI18N
        englishLanguage.setName("englishLanguage"); // NOI18N
        englishLanguage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                englishLanguageActionPerformed(evt);
            }
        });
        languageMenu.add(englishLanguage);

        irishLanguage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        irishLanguage.setText(resourceMap.getString("irishLanguage.text")); // NOI18N
        irishLanguage.setName("irishLanguage"); // NOI18N
        irishLanguage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                irishLanguageActionPerformed(evt);
            }
        });
        languageMenu.add(irishLanguage);

        spanishLanguage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        spanishLanguage.setText(resourceMap.getString("spanishLanguage.text")); // NOI18N
        spanishLanguage.setName("spanishLanguage"); // NOI18N
        languageMenu.add(spanishLanguage);

        germanLanguage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        germanLanguage.setText(resourceMap.getString("germanLanguage.text")); // NOI18N
        germanLanguage.setName("germanLanguage"); // NOI18N
        languageMenu.add(germanLanguage);

        frenchLanguage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        frenchLanguage.setText(resourceMap.getString("frenchLanguage.text")); // NOI18N
        frenchLanguage.setName("frenchLanguage"); // NOI18N
        languageMenu.add(frenchLanguage);

        toolMenu.add(languageMenu);

        optionsMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        optionsMenu.setText(resourceMap.getString("optionsMenu.text")); // NOI18N
        optionsMenu.setName("optionsMenu"); // NOI18N
        optionsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsMenuActionPerformed(evt);
            }
        });
        toolMenu.add(optionsMenu);

        menuBar.add(toolMenu);

        helpMenu.setText(core.propcheck("Help",props.getProperty("helpMenu.text")));
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(core.propcheck("About XLIFF Phoenix",props.getProperty("showAboutBox.Action.text")));
        aboutMenuItem.setToolTipText(core.propcheck("Show the Application's infomation box",props.getProperty("showAboutBox.shortDescription")));
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        helpMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        helpMenuItem.setText(resourceMap.getString("helpMenuItem.text")); // NOI18N
        helpMenuItem.setName("helpMenuItem"); // NOI18N
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setMinimumSize(new java.awt.Dimension(50, 35));
        statusPanel.setName("statusPanel"); // NOI18N
        statusPanel.setPreferredSize(new java.awt.Dimension(497, 40));

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N
        statusPanel.add(statusPanelSeparator);

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N
        statusPanel.add(statusMessageLabel);

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N
        statusPanel.add(statusAnimationLabel);

        jLabel1.setIcon(resourceMap.getIcon("jLabel1.icon")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        statusPanel.add(jLabel1);

        jLabel2.setIcon(resourceMap.getIcon("jLabel2.icon")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        statusPanel.add(jLabel2);

        jLabel3.setIcon(resourceMap.getIcon("jLabel3.icon")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        statusPanel.add(jLabel3);

        jLabel4.setIcon(resourceMap.getIcon("jLabel4.icon")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        jLabel4.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        statusPanel.add(jLabel4);

        jLabel5.setIcon(resourceMap.getIcon("jLabel5.icon")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        statusPanel.add(jLabel5);

        jPopupMenu1.setName("jPopupMenu1"); // NOI18N

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
       JFrame filter = new FilterView(core,FilteredTab);
      if(core.getJobid()!="") Output.setFeedback(core.getServer(), core.getJobid(), "Filtering in progress.");
       
}//GEN-LAST:event_filterButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if(core.getOutput()!=new Document()) {
        core.getChoser().showSaveDialog(null);
        Output.save( core.getOutput(),core.getChoser().getSelectedFile().getPath());
        }
}//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
       load();
}//GEN-LAST:event_loadButtonActionPerformed
 private void load(){
     if(fileview.getSelectedIndex()<2){
            core.loadRepos();
            search=true;
            update("loadRepos");
            if(source==true){
                update("loadAll");
            }
        } else if(fileview.getSelectedIndex()==2){
            core.loadSource();
            update("loadSource");
            if(search==true){
                update("loadAll");
            }
        }
 }
    private void fuzzyCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fuzzyCheckActionPerformed
       fuzzy=!fuzzy;
       fuzzPercent.setEnabled(fuzzy);
    }//GEN-LAST:event_fuzzyCheckActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        IProcesser processer = new Processer(core.getFilteredRepos(),core.getInput());
        double percent=(Double.parseDouble((String)fuzzPercent.getSelectedItem())/100);
        if(fuzzy)  core.setOutput(processer.process(percent));
        else core.setOutput(processer.process(1));
        //Output.display(core.getOutput(), targetTab);
        update("process");
        if(core.getJobid()!="")Output.setFeedback(core.getServer(), core.getJobid(), "Enrichment in progress.");
    }//GEN-LAST:event_processButtonActionPerformed

    private void wizardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wizardButtonActionPerformed
        new Wizard(core).run();
    }//GEN-LAST:event_wizardButtonActionPerformed

    private void menuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveActionPerformed
        if(core.getOutput()!=new Document()) {
        core.getChoser().showSaveDialog(null);
        Output.save( core.getOutput(),core.getChoser().getSelectedFile().getPath());
        }
    }//GEN-LAST:event_menuSaveActionPerformed

    private void targetFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetFilterActionPerformed
        if(core.getInput()!=null){
            core.setInput(core.targetFilter(core.getInput()));
            Output.display(core.getInput(), sourceTab);
        }
    }//GEN-LAST:event_targetFilterActionPerformed

    private void toolMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolMenuActionPerformed
     
    }//GEN-LAST:event_toolMenuActionPerformed

    private void HtmlExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HtmlExportActionPerformed
        if(core.getOutput()!=new Document()) {
        HtmlTransfromer trans = new HtmlTransfromer(core.getOutput());
        core.getChoser().showSaveDialog(null);
        Output.save( trans.transform(),core.getChoser().getSelectedFile().getPath());
        }
    }//GEN-LAST:event_HtmlExportActionPerformed

    private void menuLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLoadActionPerformed
        load();
    }//GEN-LAST:event_menuLoadActionPerformed

    private void menuPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPrintActionPerformed
        try{
            switch(fileview.getSelectedIndex()){
                case 0: repositoryTab.print();break;
                case 1: FilteredTab.print(); break;
                case 2: sourceTab.print(); break;
                case 3: targetTab.print(); break;
            }
        }
        catch(PrinterException e){
            JOptionPane.showMessageDialog(null, "error printing could not proceed because :\n"+e.getMessage());
        }
    }//GEN-LAST:event_menuPrintActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed

        switch(fileview.getSelectedIndex()){
            case 0: repositoryTab.selectAll();break;
            case 1: FilteredTab.selectAll(); break;
            case 2: sourceTab.selectAll(); break;
            case 3: targetTab.selectAll(); break;
        }

    }//GEN-LAST:event_selectAllActionPerformed

    private void menuCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCopyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuCopyActionPerformed

    private void englishLanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_englishLanguageActionPerformed
      try{
          props.load(PhoenixView.class.getResourceAsStream("resources/mainView_en.properties"));
      }
      catch(IOException e){
          JOptionPane.showMessageDialog(null, "Unable to change language because:\n"+e.getMessage());
      }
        updateLanguage();
    }//GEN-LAST:event_englishLanguageActionPerformed

    private void irishLanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_irishLanguageActionPerformed
        try{
          props.load(PhoenixView.class.getResourceAsStream("resources/mainView_ga_IE.properties"));
      }
      catch(IOException e){
          JOptionPane.showMessageDialog(null, "Unable to change language because:\n"+e.getMessage());
      }
        updateLanguage();
    }//GEN-LAST:event_irishLanguageActionPerformed

    private void tmxExporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tmxExporterActionPerformed
        if(core.getOutput()!=new Document()) {
        core.getChoser().showSaveDialog(null);
        TmxDocExporter exporter = new TmxDocExporter(core.getOutput());
        Output.save( exporter.export(),core.getChoser().getSelectedFile().getPath());
        }
    }//GEN-LAST:event_tmxExporterActionPerformed

    private void altTransFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altTransFilterActionPerformed
         if(core.getOutput()!=null){
            core.setOutput(core.altTransFilter(core.getOutput()));
            update();
        }
    }//GEN-LAST:event_altTransFilterActionPerformed

    private void autoTranslateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoTranslateActionPerformed
       if(core.getOutput()!=null)core.setOutput(new LmcBuilder(core.getOutput()).reformat(core.getOutput()));
       update();
    }//GEN-LAST:event_autoTranslateActionPerformed

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuActionPerformed

    private void getJobsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getJobsActionPerformed
        core.displayJobs();
        if(core.getJobid()!=null) loadFromServer.setEnabled(true);
    }//GEN-LAST:event_getJobsActionPerformed

    private void loadFromServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFromServerActionPerformed

        if(fileview.getSelectedIndex()<2){
            core.retriveLmc();
            update("loadRepos");
            if(source==true){
                update("loadAll");
            }
            search=true;
        } else if(fileview.getSelectedIndex()==2){
            core.retriveSorceXliff();
            update("loadSource");
            if(search==true){
                update("loadAll");
            }
            source=true;
        }


        Output.setStatus(core.getServer(), core.getJobid(), "processing");
        Output.setFeedback(core.getServer(), core.getJobid(), "Loading Resources.");
    }//GEN-LAST:event_loadFromServerActionPerformed

    private void saveToServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToServerActionPerformed
       Output.sendOutput(core.getServer(), core.getJobid(), core.getOutput());
       Output.setStatus(core.getServer(), core.getJobid(), "complete");
       Output.setFeedback(core.getServer(), core.getJobid(), "Source file sucessfully enriched.");
    }//GEN-LAST:event_saveToServerActionPerformed

    private void LMCBuilderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LMCBuilderActionPerformed
        core.lmcBuilder();
    }//GEN-LAST:event_LMCBuilderActionPerformed

    private void tastMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tastMenuActionPerformed

    }//GEN-LAST:event_tastMenuActionPerformed

    private void statsToHtmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statsToHtmlActionPerformed
        core.generatStats();
        core.getChoser().showSaveDialog(null);
        StatTransfromer exporter = new StatTransfromer(core.getStats());
        Output.save(exporter.transform(),core.getChoser().getSelectedFile().getPath());
    }//GEN-LAST:event_statsToHtmlActionPerformed

    private void menuWizardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuWizardActionPerformed
        new Wizard(core).run();
    }//GEN-LAST:event_menuWizardActionPerformed

    private void menueFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menueFilterActionPerformed
       JFrame filter = new FilterView(core,FilteredTab);
       Output.setFeedback(core.getServer(), core.getJobid(), "Filtering in progress.");
    }//GEN-LAST:event_menueFilterActionPerformed

    private void statsAsXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statsAsXmlActionPerformed
        core.generatStats();
        core.getChoser().showSaveDialog(null);
        Output.save(core.getStats(),core.getChoser().getSelectedFile().getPath());
    }//GEN-LAST:event_statsAsXmlActionPerformed

    private void optionsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsMenuActionPerformed
        new Options();
    }//GEN-LAST:event_optionsMenuActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
      BareBonesBrowserLaunch.openURL("http://www.localisation.ie/phoenix/help/help.html");
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void updateLanguage(){
        filterButton.setText(core.propcheck("Filter",props.getProperty("searchButton.text")));
        saveButton.setText(core.propcheck("Save",props.getProperty("saveButton.text")));
        loadButton.setText(core.propcheck("Load",props.getProperty("loadButton.text")));
        exitButton.setText(core.propcheck("Exit",props.getProperty("exitButton.text")));
        processButton.setText(core.propcheck("Process",props.getProperty("processButton.text")));
        fuzzyCheck.setText(core.propcheck("Fuzzy Matching",props.getProperty("fuzzyCheck.text")));
//        fuzzyCheck.setToolTipText(core.propcheck("Fuzzy Matching",props.getProperty("fuzzyCheck.text")); // NOI18N
//        fuzzPercent.setToolTipText(resourceMap.getString("fuzzPercent.toolTipText")); // NOI18N
        wizardButton.setText(core.propcheck("Wizard",props.getProperty("wizardButton")));
        //needs to be extended to update all text


    }
    protected void update(){
        if(core.getRepos()!=null) Output.display(core.getRepos(), repositoryTab);
        if(core.getFilteredRepos()!=null) Output.display(core.getFilteredRepos(), FilteredTab);
        if(core.getInput()!=null) Output.display(core.getInput(), sourceTab);
        if(core.getOutput()!=null) Output.display(core.getOutput(), targetTab);
    }
    protected void update(String caller){
        if(caller=="wizard"){
            processButton.setEnabled(true);
            saveButton.setEnabled(true);
            fuzzyCheck.setEnabled(true);
            filterButton.setEnabled(true);
            HtmlExport.setEnabled(true);
            tmxExporter.setEnabled(true);
        }
        if(caller=="process"){
            saveButton.setEnabled(true);
            HtmlExport.setEnabled(true);
            tmxExporter.setEnabled(true);
        }
        if(caller=="loadAll"){
            processButton.setEnabled(true);
            fuzzyCheck.setEnabled(true);
        }
        if(caller=="loadRepos"){
            filterButton.setEnabled(true);
        }
        if(caller=="loadSource"){
            source=true;
        }
        if(caller=="offline"){
            saveToServer.setVisible(!isOffline());
            loadFromServer.setVisible(!isOffline());
            getJobs.setVisible(!isOffline());
            saveToServer.setEnabled(!isOffline());
            loadFromServer.setEnabled(!isOffline());
            getJobs.setEnabled(!isOffline());
        }
        update();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane FilteredTab;
    private javax.swing.JMenuItem HtmlExport;
    private javax.swing.JMenuItem LMCBuilder;
    private javax.swing.JMenuItem altTransFilter;
    private javax.swing.JMenuItem autoTranslate;
    private javax.swing.JMenuItem englishLanguage;
    private javax.swing.JButton exitButton;
    private javax.swing.JTabbedPane fileview;
    private javax.swing.JButton filterButton;
    private javax.swing.JMenuItem frenchLanguage;
    private javax.swing.JComboBox fuzzPercent;
    private javax.swing.JCheckBox fuzzyCheck;
    private javax.swing.JMenuItem germanLanguage;
    private javax.swing.JMenuItem getJobs;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JMenuItem irishLanguage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JMenu languageMenu;
    private javax.swing.JButton loadButton;
    private javax.swing.JMenuItem loadFromServer;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuCopy;
    private javax.swing.JMenuItem menuLoad;
    private javax.swing.JMenuItem menuPrint;
    private javax.swing.JMenuItem menuSave;
    private javax.swing.JMenuItem menuWizard;
    private javax.swing.JMenuItem menueFilter;
    private javax.swing.JMenuItem optionsMenu;
    private javax.swing.JButton processButton;
    private javax.swing.JTextPane repositoryTab;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveToServer;
    private javax.swing.JMenuItem selectAll;
    private javax.swing.JTextPane sourceTab;
    private javax.swing.JMenuItem spanishLanguage;
    private javax.swing.JMenuItem statsAsXml;
    private javax.swing.JMenuItem statsToHtml;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JMenuItem targetFilter;
    private javax.swing.JTextPane targetTab;
    private javax.swing.JMenu tastMenu;
    private javax.swing.JMenuItem tmxExporter;
    private javax.swing.JMenu toolMenu;
    private javax.swing.JButton wizardButton;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
